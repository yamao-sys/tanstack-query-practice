// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package apis

import (
	"context"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// SignUpValidationError defines model for SignUpValidationError.
type SignUpValidationError struct {
	BackIdentification  *[]string `json:"backIdentification,omitempty"`
	Birthday            *[]string `json:"birthday,omitempty"`
	Email               *[]string `json:"email,omitempty"`
	FirstName           *[]string `json:"firstName,omitempty"`
	FrontIdentification *[]string `json:"frontIdentification,omitempty"`
	LastName            *[]string `json:"lastName,omitempty"`
	Password            *[]string `json:"password,omitempty"`
}

// StoreTodoValidationError defines model for StoreTodoValidationError.
type StoreTodoValidationError struct {
	Content *[]string `json:"content,omitempty"`
	Title   *[]string `json:"title,omitempty"`
}

// Todo defines model for Todo.
type Todo struct {
	Content string `json:"content"`
	Id      int    `json:"id"`
	Title   string `json:"title"`
}

// CsrfResponse defines model for CsrfResponse.
type CsrfResponse struct {
	CsrfToken string `json:"csrf_token"`
}

// DeleteTodoResponse defines model for DeleteTodoResponse.
type DeleteTodoResponse struct {
	Code   int64 `json:"code"`
	Result bool  `json:"result"`
}

// FetchTodosResponse defines model for FetchTodosResponse.
type FetchTodosResponse struct {
	Todos []Todo `json:"todos"`
}

// InternalServerErrorResponse defines model for InternalServerErrorResponse.
type InternalServerErrorResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// NotFoundErrorResponse defines model for NotFoundErrorResponse.
type NotFoundErrorResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// ShowTodoResponse defines model for ShowTodoResponse.
type ShowTodoResponse struct {
	Todo Todo `json:"todo"`
}

// SignInBadRequestResponse defines model for SignInBadRequestResponse.
type SignInBadRequestResponse struct {
	Errors []string `json:"errors"`
}

// SignInOkResponse defines model for SignInOkResponse.
type SignInOkResponse = map[string]interface{}

// SignUpResponse defines model for SignUpResponse.
type SignUpResponse struct {
	Code   int64                 `json:"code"`
	Errors SignUpValidationError `json:"errors"`
}

// StoreTodoResponse defines model for StoreTodoResponse.
type StoreTodoResponse struct {
	Code   int64                    `json:"code"`
	Errors StoreTodoValidationError `json:"errors"`
}

// UnauthorizedErrorResponse defines model for UnauthorizedErrorResponse.
type UnauthorizedErrorResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// SignInInput defines model for SignInInput.
type SignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// StoreTodoInput defines model for StoreTodoInput.
type StoreTodoInput struct {
	Content string `json:"content"`
	Title   string `json:"title"`
}

// PostAuthSignInJSONBody defines parameters for PostAuthSignIn.
type PostAuthSignInJSONBody struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// PostAuthSignUpMultipartBody defines parameters for PostAuthSignUp.
type PostAuthSignUpMultipartBody struct {
	BackIdentification  *openapi_types.File `json:"backIdentification,omitempty"`
	Birthday            *openapi_types.Date `json:"birthday,omitempty"`
	Email               string              `json:"email"`
	FirstName           string              `json:"firstName"`
	FrontIdentification *openapi_types.File `json:"frontIdentification,omitempty"`
	LastName            string              `json:"lastName"`
	Password            string              `json:"password"`
}

// PostAuthValidateSignUpMultipartBody defines parameters for PostAuthValidateSignUp.
type PostAuthValidateSignUpMultipartBody struct {
	BackIdentification  *openapi_types.File `json:"backIdentification,omitempty"`
	Birthday            *openapi_types.Date `json:"birthday,omitempty"`
	Email               string              `json:"email"`
	FirstName           string              `json:"firstName"`
	FrontIdentification *openapi_types.File `json:"frontIdentification,omitempty"`
	LastName            string              `json:"lastName"`
	Password            string              `json:"password"`
}

// PostTodosJSONBody defines parameters for PostTodos.
type PostTodosJSONBody struct {
	Content string `json:"content"`
	Title   string `json:"title"`
}

// PatchTodoJSONBody defines parameters for PatchTodo.
type PatchTodoJSONBody struct {
	Content string `json:"content"`
	Title   string `json:"title"`
}

// PostAuthSignInJSONRequestBody defines body for PostAuthSignIn for application/json ContentType.
type PostAuthSignInJSONRequestBody PostAuthSignInJSONBody

// PostAuthSignUpMultipartRequestBody defines body for PostAuthSignUp for multipart/form-data ContentType.
type PostAuthSignUpMultipartRequestBody PostAuthSignUpMultipartBody

// PostAuthValidateSignUpMultipartRequestBody defines body for PostAuthValidateSignUp for multipart/form-data ContentType.
type PostAuthValidateSignUpMultipartRequestBody PostAuthValidateSignUpMultipartBody

// PostTodosJSONRequestBody defines body for PostTodos for application/json ContentType.
type PostTodosJSONRequestBody PostTodosJSONBody

// PatchTodoJSONRequestBody defines body for PatchTodo for application/json ContentType.
type PatchTodoJSONRequestBody PatchTodoJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Csrf
	// (GET /auth/csrf)
	GetAuthCsrf(ctx echo.Context) error
	// Sign In
	// (POST /auth/signIn)
	PostAuthSignIn(ctx echo.Context) error
	// SignUp
	// (POST /auth/signUp)
	PostAuthSignUp(ctx echo.Context) error
	// Validate SignUp
	// (POST /auth/validateSignUp)
	PostAuthValidateSignUp(ctx echo.Context) error
	// Fetch Todos
	// (GET /todos)
	GetTodos(ctx echo.Context) error
	// Create Todo
	// (POST /todos)
	PostTodos(ctx echo.Context) error
	// Delete Todo
	// (DELETE /todos/{id})
	DeleteTodo(ctx echo.Context, id string) error
	// Show Todo
	// (GET /todos/{id})
	GetTodo(ctx echo.Context, id string) error
	// Update Todo
	// (PATCH /todos/{id})
	PatchTodo(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAuthCsrf converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthCsrf(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthCsrf(ctx)
	return err
}

// PostAuthSignIn converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthSignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthSignIn(ctx)
	return err
}

// PostAuthSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthSignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthSignUp(ctx)
	return err
}

// PostAuthValidateSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthValidateSignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthValidateSignUp(ctx)
	return err
}

// GetTodos converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodos(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodos(ctx)
	return err
}

// PostTodos converts echo context to params.
func (w *ServerInterfaceWrapper) PostTodos(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTodos(ctx)
	return err
}

// DeleteTodo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTodo(ctx, id)
	return err
}

// GetTodo converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodo(ctx, id)
	return err
}

// PatchTodo converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTodo(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/csrf", wrapper.GetAuthCsrf)
	router.POST(baseURL+"/auth/signIn", wrapper.PostAuthSignIn)
	router.POST(baseURL+"/auth/signUp", wrapper.PostAuthSignUp)
	router.POST(baseURL+"/auth/validateSignUp", wrapper.PostAuthValidateSignUp)
	router.GET(baseURL+"/todos", wrapper.GetTodos)
	router.POST(baseURL+"/todos", wrapper.PostTodos)
	router.DELETE(baseURL+"/todos/:id", wrapper.DeleteTodo)
	router.GET(baseURL+"/todos/:id", wrapper.GetTodo)
	router.PATCH(baseURL+"/todos/:id", wrapper.PatchTodo)

}

type CsrfResponseJSONResponse struct {
	CsrfToken string `json:"csrf_token"`
}

type DeleteTodoResponseJSONResponse struct {
	Code   int64 `json:"code"`
	Result bool  `json:"result"`
}

type FetchTodosResponseJSONResponse struct {
	Todos []Todo `json:"todos"`
}

type InternalServerErrorResponseJSONResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

type NotFoundErrorResponseJSONResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

type ShowTodoResponseJSONResponse struct {
	Todo Todo `json:"todo"`
}

type SignInBadRequestResponseJSONResponse struct {
	Errors []string `json:"errors"`
}

type SignInOkResponseResponseHeaders struct {
	SetCookie string
}
type SignInOkResponseJSONResponse struct {
	Body map[string]interface{}

	Headers SignInOkResponseResponseHeaders
}

type SignUpResponseJSONResponse struct {
	Code   int64                 `json:"code"`
	Errors SignUpValidationError `json:"errors"`
}

type StoreTodoResponseJSONResponse struct {
	Code   int64                    `json:"code"`
	Errors StoreTodoValidationError `json:"errors"`
}

type UnauthorizedErrorResponseJSONResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

type GetAuthCsrfRequestObject struct {
}

type GetAuthCsrfResponseObject interface {
	VisitGetAuthCsrfResponse(w http.ResponseWriter) error
}

type GetAuthCsrf200JSONResponse struct{ CsrfResponseJSONResponse }

func (response GetAuthCsrf200JSONResponse) VisitGetAuthCsrfResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthCsrf500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response GetAuthCsrf500JSONResponse) VisitGetAuthCsrfResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSignInRequestObject struct {
	Body *PostAuthSignInJSONRequestBody
}

type PostAuthSignInResponseObject interface {
	VisitPostAuthSignInResponse(w http.ResponseWriter) error
}

type PostAuthSignIn200JSONResponse struct{ SignInOkResponseJSONResponse }

func (response PostAuthSignIn200JSONResponse) VisitPostAuthSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAuthSignIn400JSONResponse struct {
	SignInBadRequestResponseJSONResponse
}

func (response PostAuthSignIn400JSONResponse) VisitPostAuthSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSignIn500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostAuthSignIn500JSONResponse) VisitPostAuthSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSignUpRequestObject struct {
	Body *multipart.Reader
}

type PostAuthSignUpResponseObject interface {
	VisitPostAuthSignUpResponse(w http.ResponseWriter) error
}

type PostAuthSignUp200JSONResponse struct{ SignUpResponseJSONResponse }

func (response PostAuthSignUp200JSONResponse) VisitPostAuthSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSignUp400JSONResponse struct {
	Code   int64                 `json:"code"`
	Errors SignUpValidationError `json:"errors"`
}

func (response PostAuthSignUp400JSONResponse) VisitPostAuthSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthSignUp500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostAuthSignUp500JSONResponse) VisitPostAuthSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthValidateSignUpRequestObject struct {
	Body *multipart.Reader
}

type PostAuthValidateSignUpResponseObject interface {
	VisitPostAuthValidateSignUpResponse(w http.ResponseWriter) error
}

type PostAuthValidateSignUp200JSONResponse struct{ SignUpResponseJSONResponse }

func (response PostAuthValidateSignUp200JSONResponse) VisitPostAuthValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthValidateSignUp400JSONResponse struct {
	Code   int64                 `json:"code"`
	Errors SignUpValidationError `json:"errors"`
}

func (response PostAuthValidateSignUp400JSONResponse) VisitPostAuthValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthValidateSignUp500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostAuthValidateSignUp500JSONResponse) VisitPostAuthValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTodosRequestObject struct {
}

type GetTodosResponseObject interface {
	VisitGetTodosResponse(w http.ResponseWriter) error
}

type GetTodos200JSONResponse struct{ FetchTodosResponseJSONResponse }

func (response GetTodos200JSONResponse) VisitGetTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTodos401JSONResponse struct {
	UnauthorizedErrorResponseJSONResponse
}

func (response GetTodos401JSONResponse) VisitGetTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTodos500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response GetTodos500JSONResponse) VisitGetTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTodosRequestObject struct {
	Body *PostTodosJSONRequestBody
}

type PostTodosResponseObject interface {
	VisitPostTodosResponse(w http.ResponseWriter) error
}

type PostTodos200JSONResponse struct{ StoreTodoResponseJSONResponse }

func (response PostTodos200JSONResponse) VisitPostTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTodos400JSONResponse struct {
	Code   int64                    `json:"code"`
	Errors StoreTodoValidationError `json:"errors"`
}

func (response PostTodos400JSONResponse) VisitPostTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostTodos401JSONResponse struct {
	UnauthorizedErrorResponseJSONResponse
}

func (response PostTodos401JSONResponse) VisitPostTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostTodos500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostTodos500JSONResponse) VisitPostTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTodoRequestObject struct {
	Id string `json:"id"`
}

type DeleteTodoResponseObject interface {
	VisitDeleteTodoResponse(w http.ResponseWriter) error
}

type DeleteTodo200JSONResponse struct{ DeleteTodoResponseJSONResponse }

func (response DeleteTodo200JSONResponse) VisitDeleteTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTodo401JSONResponse struct {
	UnauthorizedErrorResponseJSONResponse
}

func (response DeleteTodo401JSONResponse) VisitDeleteTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTodo404JSONResponse struct {
	NotFoundErrorResponseJSONResponse
}

func (response DeleteTodo404JSONResponse) VisitDeleteTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTodo500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response DeleteTodo500JSONResponse) VisitDeleteTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTodoRequestObject struct {
	Id string `json:"id"`
}

type GetTodoResponseObject interface {
	VisitGetTodoResponse(w http.ResponseWriter) error
}

type GetTodo200JSONResponse struct{ ShowTodoResponseJSONResponse }

func (response GetTodo200JSONResponse) VisitGetTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTodo401JSONResponse struct {
	UnauthorizedErrorResponseJSONResponse
}

func (response GetTodo401JSONResponse) VisitGetTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTodo404JSONResponse struct {
	NotFoundErrorResponseJSONResponse
}

func (response GetTodo404JSONResponse) VisitGetTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTodo500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response GetTodo500JSONResponse) VisitGetTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchTodoRequestObject struct {
	Id   string `json:"id"`
	Body *PatchTodoJSONRequestBody
}

type PatchTodoResponseObject interface {
	VisitPatchTodoResponse(w http.ResponseWriter) error
}

type PatchTodo200JSONResponse struct{ StoreTodoResponseJSONResponse }

func (response PatchTodo200JSONResponse) VisitPatchTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchTodo400JSONResponse struct {
	Code   int64                    `json:"code"`
	Errors StoreTodoValidationError `json:"errors"`
}

func (response PatchTodo400JSONResponse) VisitPatchTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchTodo401JSONResponse struct {
	UnauthorizedErrorResponseJSONResponse
}

func (response PatchTodo401JSONResponse) VisitPatchTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchTodo404JSONResponse struct {
	NotFoundErrorResponseJSONResponse
}

func (response PatchTodo404JSONResponse) VisitPatchTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchTodo500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PatchTodo500JSONResponse) VisitPatchTodoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get Csrf
	// (GET /auth/csrf)
	GetAuthCsrf(ctx context.Context, request GetAuthCsrfRequestObject) (GetAuthCsrfResponseObject, error)
	// Sign In
	// (POST /auth/signIn)
	PostAuthSignIn(ctx context.Context, request PostAuthSignInRequestObject) (PostAuthSignInResponseObject, error)
	// SignUp
	// (POST /auth/signUp)
	PostAuthSignUp(ctx context.Context, request PostAuthSignUpRequestObject) (PostAuthSignUpResponseObject, error)
	// Validate SignUp
	// (POST /auth/validateSignUp)
	PostAuthValidateSignUp(ctx context.Context, request PostAuthValidateSignUpRequestObject) (PostAuthValidateSignUpResponseObject, error)
	// Fetch Todos
	// (GET /todos)
	GetTodos(ctx context.Context, request GetTodosRequestObject) (GetTodosResponseObject, error)
	// Create Todo
	// (POST /todos)
	PostTodos(ctx context.Context, request PostTodosRequestObject) (PostTodosResponseObject, error)
	// Delete Todo
	// (DELETE /todos/{id})
	DeleteTodo(ctx context.Context, request DeleteTodoRequestObject) (DeleteTodoResponseObject, error)
	// Show Todo
	// (GET /todos/{id})
	GetTodo(ctx context.Context, request GetTodoRequestObject) (GetTodoResponseObject, error)
	// Update Todo
	// (PATCH /todos/{id})
	PatchTodo(ctx context.Context, request PatchTodoRequestObject) (PatchTodoResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAuthCsrf operation middleware
func (sh *strictHandler) GetAuthCsrf(ctx echo.Context) error {
	var request GetAuthCsrfRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthCsrf(ctx.Request().Context(), request.(GetAuthCsrfRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthCsrf")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAuthCsrfResponseObject); ok {
		return validResponse.VisitGetAuthCsrfResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthSignIn operation middleware
func (sh *strictHandler) PostAuthSignIn(ctx echo.Context) error {
	var request PostAuthSignInRequestObject

	var body PostAuthSignInJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthSignIn(ctx.Request().Context(), request.(PostAuthSignInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthSignIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthSignInResponseObject); ok {
		return validResponse.VisitPostAuthSignInResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthSignUp operation middleware
func (sh *strictHandler) PostAuthSignUp(ctx echo.Context) error {
	var request PostAuthSignUpRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthSignUp(ctx.Request().Context(), request.(PostAuthSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthSignUpResponseObject); ok {
		return validResponse.VisitPostAuthSignUpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthValidateSignUp operation middleware
func (sh *strictHandler) PostAuthValidateSignUp(ctx echo.Context) error {
	var request PostAuthValidateSignUpRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthValidateSignUp(ctx.Request().Context(), request.(PostAuthValidateSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthValidateSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthValidateSignUpResponseObject); ok {
		return validResponse.VisitPostAuthValidateSignUpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTodos operation middleware
func (sh *strictHandler) GetTodos(ctx echo.Context) error {
	var request GetTodosRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTodos(ctx.Request().Context(), request.(GetTodosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTodos")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTodosResponseObject); ok {
		return validResponse.VisitGetTodosResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTodos operation middleware
func (sh *strictHandler) PostTodos(ctx echo.Context) error {
	var request PostTodosRequestObject

	var body PostTodosJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTodos(ctx.Request().Context(), request.(PostTodosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTodos")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTodosResponseObject); ok {
		return validResponse.VisitPostTodosResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTodo operation middleware
func (sh *strictHandler) DeleteTodo(ctx echo.Context, id string) error {
	var request DeleteTodoRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTodo(ctx.Request().Context(), request.(DeleteTodoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTodo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTodoResponseObject); ok {
		return validResponse.VisitDeleteTodoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTodo operation middleware
func (sh *strictHandler) GetTodo(ctx echo.Context, id string) error {
	var request GetTodoRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTodo(ctx.Request().Context(), request.(GetTodoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTodo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTodoResponseObject); ok {
		return validResponse.VisitGetTodoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchTodo operation middleware
func (sh *strictHandler) PatchTodo(ctx echo.Context, id string) error {
	var request PatchTodoRequestObject

	request.Id = id

	var body PatchTodoJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTodo(ctx.Request().Context(), request.(PatchTodoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTodo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchTodoResponseObject); ok {
		return validResponse.VisitPatchTodoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
